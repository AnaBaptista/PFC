/**
 * It draws dinamically the tree generated by all data files
 * @param id {Array} data file's id
 */
function getDataFileTree (ids) {
  let options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ids: ids.split(',')})
  }
  fetch('dataFile/nodes', options)
    .then(handleError)
    .then(res => res.json())
    .then(tree => {
      document.getElementById('data-file-tree').innerText = ''
      drawIndentedTree(tree, `data-file-tree`)
    }).catch(err => alert(err.message()))
}

/**
 * This function create an individual mapping on server side
 */
function createIndMapping () {
  let dNode = document.getElementById('classes-to-term').childNodes[0]
  let onto = document.getElementById('classes-to-concept').childNodes[0]
  let data = {
    tag: dNode.childNodes[0].textContent,
    nodeId: dNode.id,
    IRI: onto.textContent
  }

  let options = {
    method: 'POST',
    headers: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  }
  fetch(`/map/individual?ontologyFileId=${onto.id}&dataFileId=${dNode.childNodes[1].id}`, options)
    .then(handleError)
    .then(res => res.text())
    .then(text => {
      let elem = document.getElementById('mapper-segment')
      elem.innerHTML = text
    })
}

/**
 * This functions dynamically changes the selected option
 * @param name {String} dropwdown id to get the selected option
 */
function changeOntologyOptionToMapping (name) {
  let select = document.getElementById(`${name}-selection`)
  let selectElem = select[select.selectedIndex]
  let div = document.createElement('div')
  div.id = selectElem.id
  div.className = name
  div.innerText = selectElem.value
  let elem = document.getElementById(`${name}-to-concept`)
  elem.replaceChild(div, elem.childNodes[0])
}

/**
 * This functions dynamically changes the selected option
 * @param node {Object} the selected node
 */
function changeDataFileOptionToMapping (node) {
  let div = document.createElement('div')
  div.id = node.id
  div.innerText = node.tag
  let childDiv = document.createElement('label')
  childDiv.id = node.dataFileId
  childDiv.className = 'dataFileId'
  div.appendChild(childDiv)
  let id = document.getElementById('data-file-term').innerText
  let elem = document.getElementById(id)
  elem.replaceChild(div, elem.childNodes[0])
}

function createDataProperty (id) {
  let x = 'a'
}

function createObjectProperty (id) {
  let x = 'a'
}

function changeIndMappingContent(id, nodeId, name, path, ontId, dataId) {
  let term = document.getElementById('data-file-term')
  term.innerText = `${name}-to-term`
  let url = `/map/individual/${id}/${path}?nodeId=${nodeId}&ontologyFileId=${ontId}&dataFileId=${dataId}`
  textRequest(url)
    .then(res => {
      let elem = document.getElementById('individual-mapping-content')
      elem.innerHTML = res
    })
}

function getOntologyFileData (id, data, name) {
  let path = `/ontologyFile/${id}/${data}`
  textRequest(path).then(res => {
    let elem = document.getElementById(name)
    elem.innerHTML = res
    // let inputs = document.querySelectorAll(`input[name=${name}]`)
    // inputs.forEach(elem => elem.addEventListener('change', evt => {
    //   let target = evt.target
    //
    // }))
    // let elements = document.querySelectorAll(`div[class=${name}]`)
    // elements.forEach(elem => {
    //   elem.childNodes.
    // })
  })
}
